{"name": "test_positive_single_resource", "status": "broken", "statusDetails": {"message": "requests.exceptions.MissingSchema: Invalid URL '/api/unknown/2': No scheme supplied. Perhaps you meant http:///api/unknown/2?", "trace": "def test_positive_single_resource():\n>       responce = requests.get('/api/unknown/2')\n\ntest_regres.py:14: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\venv\\lib\\site-packages\\requests\\api.py:73: in get\n    return request(\"get\", url, params=params, **kwargs)\n..\\venv\\lib\\site-packages\\requests\\api.py:59: in request\n    return session.request(method=method, url=url, **kwargs)\n..\\venv\\lib\\site-packages\\requests\\sessions.py:573: in request\n    prep = self.prepare_request(req)\n..\\venv\\lib\\site-packages\\requests\\sessions.py:484: in prepare_request\n    p.prepare(\n..\\venv\\lib\\site-packages\\requests\\models.py:368: in prepare\n    self.prepare_url(url, params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <PreparedRequest [GET]>, url = '/api/unknown/2', params = OrderedDict()\n\n    def prepare_url(self, url, params):\n        \"\"\"Prepares the given HTTP URL.\"\"\"\n        #: Accept objects that have string representations.\n        #: We're unable to blindly call unicode/str functions\n        #: as this will include the bytestring indicator (b'')\n        #: on python 3.x.\n        #: https://github.com/psf/requests/pull/2238\n        if isinstance(url, bytes):\n            url = url.decode(\"utf8\")\n        else:\n            url = str(url)\n    \n        # Remove leading whitespaces from url\n        url = url.lstrip()\n    \n        # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n        # `data` etc to work around exceptions from `url_parse`, which\n        # handles RFC 3986 only.\n        if \":\" in url and not url.lower().startswith(\"http\"):\n            self.url = url\n            return\n    \n        # Support for unicode domain names and paths.\n        try:\n            scheme, auth, host, port, path, query, fragment = parse_url(url)\n        except LocationParseError as e:\n            raise InvalidURL(*e.args)\n    \n        if not scheme:\n>           raise MissingSchema(\n                f\"Invalid URL {url!r}: No scheme supplied. \"\n                f\"Perhaps you meant http://{url}?\"\n            )\nE           requests.exceptions.MissingSchema: Invalid URL '/api/unknown/2': No scheme supplied. Perhaps you meant http:///api/unknown/2?\n\n..\\venv\\lib\\site-packages\\requests\\models.py:439: MissingSchema"}, "start": 1661422767737, "stop": 1661422767740, "uuid": "17632af9-0e6f-48c6-8c5a-0ba2dbab2f96", "historyId": "bfb99ca9e6dff1a68c0098b03d698cd7", "testCaseId": "6668d4146cb6ff08d0e6feb754f24c37", "fullName": "tests.test_regres#test_positive_single_resource", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_regres"}, {"name": "host", "value": "DESKTOP-RDDJORK"}, {"name": "thread", "value": "17004-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_regres"}]}